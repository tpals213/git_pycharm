# pandas_test3.py

import pandas as pd
import numpy as np

# DataFrame 클래스
# 데이터들을 가지고 표(테이블)을 만들 때 사용하는 클래스

'''
가장 간단한 데이터 프레임 생성 방법
1. 딕셔너리를 만든다. => 키 : 값 (리스트나 일차원배열로 작성 => 컬럼(열)이 됨)
    키(key) => 컬럼 라벨이 됨(기본 문자열임)
    주의 : 값에 해당되는 리스트나 일차원배열의 데이터 갯수가 모두 같아야 함
2. DataFrame 클래스 생성자에 딕셔너리를 초기값으로 지정해서 객체 생성
'''
data = {
    "2019": [9904312, 3448737, 2890451, 2466052],
    "2020": [9631482, 3393191, 2632035, 2431774],
    "2021": [9762546, 3512547, 2517680, 2456016],
    "2022": [9853972, 3655437, 2466338, 2473990],
    "지역": ["수도권", "경상권", "수도권", "경상권"],
    "2010-2015 증가율": [0.0283, 0.0163, 0.0982, 0.0141]
}   # dict 사전 자료형

# 출력시 컬럼 나열 순서를 재배치 할 수 있음
columns = ["지역", "2019", "2020", "2021", "2022", "2010-2015 증가율"]
index = ['서울', '부산', '인천', '대구']

df = pd.DataFrame(data, index=index, columns= columns)
print(df)

# 속성 : values, columns, index
print(df.values)
print(df.columns)
print(df.index)

# name 속성 이용
df.index.name = '도시'
df.columns.name = '특성'
print(df)

# 데이터 프레임의 열(컬럼) 데이터 갱신, 추가, 삭제 가능
# 시리즈처럼 인덱싱 사용 : 컬럼라벨, 인덱스라벨 사용 가능
# 예 : 2010-2015 증기율 이라는 이름의 열값을 변경한다면
df['2010-2015 증가율'] = df['2010-2015 증가율'] * 100 # 라벨만 있으면 변경
print(df)
df['2019-2022 증가율'] = ((df['2022'] - df['2019']) / df['2019'] * 100).round(2)
print(df)   # 없는 라벨에 대해 대입하면 추가

# 데이터프레임의 열 삭제, del 명령 사용
del df['2019-2022 증가율']
print(df)

# 데이터프레임세서는 하나의 키가 하나의 열(컬럼)이 되므로, 열단위로 인덱싱 가능
# 컬럼라벨(키)을 이용
print(df['지역'])

# 여러 개의 컬럼(열)을 인덱싱 가능
print(df[['2019', '2022']]) # [] 두 겹 사용

# 기존의 데이터프레임에서 일부를 추출해서 새로운 데이터프레임 생성
df2 = df[['2020']]
print(df2)
print(type(df2))

# 데이터프레임에서 일부를 추출해서 별도의 시리즈 생성
s = df['2019']  # [] 한겹 -> 시리즈
print(s)
print(type(s))

# 인덱싱시 주의사항
# 정수 인덱스는 데이터프레임에서는 행 인덱스에만 사용 가능
# 열(column) 인덱스에 정수 인데스 사용하면 에러(KeyError)
# print(df[0])    # 0번째 컬럼 출력 => KeyError

# 데이터 프레임 컬럼에 정수 인덱스가 가능한 경우는, 숫자형 라벨을 지정한 경우만
df3 = pd.DataFrame(np.arange(12).reshape(3, 4))
print(df3)
print(df3[2])
print(df3[[1, 2]])  # ar[1][2] == ar[1, 2] : 1행2열, ar[[1, 2]] : 1열, 2열 선택

# 행 인덱싱 : 항상 슬라이싱해야 함 (라벨로 슬라이싱 가능)
print(df[:1])   # 0행만 추출
print(df[1:2])  # 1행만 추출
print(df[1:3])  # 1행, 2행 추출
print(df['서울':'부산'])

# 개별 데이터 1개 인덱싱
# 데이터프레임변수['컬럼라벨']['인덱스라벨']
print(df['2019']['서울'])
